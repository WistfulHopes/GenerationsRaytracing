#include "DxgiConverter.h"

DXGI_FORMAT DxgiConverter::convert(D3DFORMAT format)
{
    switch (format)
    {
    case D3DFMT_UNKNOWN: return DXGI_FORMAT_UNKNOWN;
    case D3DFMT_A16B16G16R16: return DXGI_FORMAT_R16G16B16A16_UNORM;
    case D3DFMT_A16B16G16R16F: return DXGI_FORMAT_R16G16B16A16_FLOAT;
    case D3DFMT_A1R5G5B5: return DXGI_FORMAT_B5G5R5A1_UNORM;
    case D3DFMT_A2B10G10R10: return DXGI_FORMAT_R10G10B10A2_UNORM;
    case D3DFMT_A32B32G32R32F: return DXGI_FORMAT_R32G32B32A32_FLOAT;
    case D3DFMT_A4R4G4B4: return DXGI_FORMAT_B4G4R4A4_UNORM;
    case D3DFMT_A8: return DXGI_FORMAT_A8_UNORM;
    case D3DFMT_A8B8G8R8: return DXGI_FORMAT_R8G8B8A8_UNORM;
    case D3DFMT_A8R8G8B8: return DXGI_FORMAT_B8G8R8A8_UNORM;
    case D3DFMT_ATI1: return DXGI_FORMAT_BC4_UNORM;
    case D3DFMT_ATI2: return DXGI_FORMAT_BC4_UNORM;
    case D3DFMT_D15S1: return DXGI_FORMAT_D24_UNORM_S8_UINT;
    case D3DFMT_D16: return DXGI_FORMAT_D16_UNORM;
    case D3DFMT_D16_LOCKABLE: return DXGI_FORMAT_D16_UNORM;
    case D3DFMT_D24FS8: return DXGI_FORMAT_D24_UNORM_S8_UINT;
    case D3DFMT_D24S8: return DXGI_FORMAT_D24_UNORM_S8_UINT;
    case D3DFMT_D24X4S4: return DXGI_FORMAT_D24_UNORM_S8_UINT;
    case D3DFMT_D24X8: return DXGI_FORMAT_D24_UNORM_S8_UINT;
    case D3DFMT_D32: return DXGI_FORMAT_D32_FLOAT;
    case D3DFMT_D32F_LOCKABLE: return DXGI_FORMAT_D32_FLOAT;
    case D3DFMT_D32_LOCKABLE: return DXGI_FORMAT_D32_FLOAT;
    case D3DFMT_DF16: return DXGI_FORMAT_D32_FLOAT;
    case D3DFMT_DF24: return DXGI_FORMAT_D32_FLOAT;
    case D3DFMT_DXT1: return DXGI_FORMAT_BC1_UNORM;
    case D3DFMT_DXT2: return DXGI_FORMAT_BC2_UNORM;
    case D3DFMT_DXT3: return DXGI_FORMAT_BC2_UNORM;
    case D3DFMT_DXT4: return DXGI_FORMAT_BC3_UNORM;
    case D3DFMT_DXT5: return DXGI_FORMAT_BC3_UNORM;
    case D3DFMT_G16R16: return DXGI_FORMAT_R16G16_UNORM;
    case D3DFMT_G16R16F: return DXGI_FORMAT_R16G16_FLOAT;
    case D3DFMT_G32R32F: return DXGI_FORMAT_R32G32_FLOAT;
    case D3DFMT_INDEX16: return DXGI_FORMAT_R16_UINT;
    case D3DFMT_INDEX32: return DXGI_FORMAT_R32_UINT;
    case D3DFMT_INTZ: return DXGI_FORMAT_D32_FLOAT;
    case D3DFMT_RAWZ: return DXGI_FORMAT_D32_FLOAT;
    case D3DFMT_L16: return DXGI_FORMAT_R16_UNORM;
    case D3DFMT_L8: return DXGI_FORMAT_R8_UNORM;
    case D3DFMT_Q16W16V16U16: return DXGI_FORMAT_R16G16B16A16_SNORM;
    case D3DFMT_Q8W8V8U8: return DXGI_FORMAT_R8G8B8A8_SNORM;
    case D3DFMT_R16F: return DXGI_FORMAT_R16_FLOAT;
    case D3DFMT_R32F: return DXGI_FORMAT_R32_FLOAT;
    case D3DFMT_R5G6B5: return DXGI_FORMAT_B5G6R5_UNORM;
    case D3DFMT_R8G8B8: return DXGI_FORMAT_B8G8R8X8_UNORM;
    case D3DFMT_S8_LOCKABLE: return DXGI_FORMAT_D24_UNORM_S8_UINT;
    case D3DFMT_V16U16: return DXGI_FORMAT_R16G16_SNORM;
    case D3DFMT_V8U8: return DXGI_FORMAT_R8G8_SNORM;
    case D3DFMT_X8R8G8B8: return DXGI_FORMAT_B8G8R8X8_UNORM;
    case D3DFMT_NULL: return DXGI_FORMAT_R8_UNORM;
    }

    return DXGI_FORMAT_UNKNOWN;
}

DXGI_FORMAT DxgiConverter::makeTypeless(DXGI_FORMAT format)
{
    switch (format)
    {
    case DXGI_FORMAT_R32G32B32A32_FLOAT:
    case DXGI_FORMAT_R32G32B32A32_UINT:
    case DXGI_FORMAT_R32G32B32A32_SINT:
        return DXGI_FORMAT_R32G32B32A32_TYPELESS;

    case DXGI_FORMAT_R32G32B32_FLOAT:
    case DXGI_FORMAT_R32G32B32_UINT:
    case DXGI_FORMAT_R32G32B32_SINT:
        return DXGI_FORMAT_R32G32B32_TYPELESS;

    case DXGI_FORMAT_R16G16B16A16_FLOAT:
    case DXGI_FORMAT_R16G16B16A16_UNORM:
    case DXGI_FORMAT_R16G16B16A16_UINT:
    case DXGI_FORMAT_R16G16B16A16_SNORM:
    case DXGI_FORMAT_R16G16B16A16_SINT:
        return DXGI_FORMAT_R16G16B16A16_TYPELESS;

    case DXGI_FORMAT_R32G32_FLOAT:
    case DXGI_FORMAT_R32G32_UINT:
    case DXGI_FORMAT_R32G32_SINT:
        return DXGI_FORMAT_R32G32_TYPELESS;

    case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
    case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
    case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
        return DXGI_FORMAT_R32G8X24_TYPELESS;

    case DXGI_FORMAT_R10G10B10A2_TYPELESS:
    case DXGI_FORMAT_R10G10B10A2_UNORM:
    case DXGI_FORMAT_R10G10B10A2_UINT:
        return DXGI_FORMAT_R10G10B10A2_TYPELESS;

    case DXGI_FORMAT_R8G8B8A8_UNORM:
    case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
    case DXGI_FORMAT_R8G8B8A8_UINT:
    case DXGI_FORMAT_R8G8B8A8_SNORM:
    case DXGI_FORMAT_R8G8B8A8_SINT:
        return DXGI_FORMAT_R8G8B8A8_TYPELESS;

    case DXGI_FORMAT_R16G16_FLOAT:
    case DXGI_FORMAT_R16G16_UNORM:
    case DXGI_FORMAT_R16G16_UINT:
    case DXGI_FORMAT_R16G16_SNORM:
    case DXGI_FORMAT_R16G16_SINT:
        return DXGI_FORMAT_R16G16_TYPELESS;

    case DXGI_FORMAT_D32_FLOAT:
    case DXGI_FORMAT_R32_FLOAT:
    case DXGI_FORMAT_R32_UINT:
    case DXGI_FORMAT_R32_SINT:
        return DXGI_FORMAT_R32_TYPELESS;

    case DXGI_FORMAT_D24_UNORM_S8_UINT:
    case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
    case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
        return DXGI_FORMAT_R24G8_TYPELESS;

    case DXGI_FORMAT_R8G8_UNORM:
    case DXGI_FORMAT_R8G8_UINT:
    case DXGI_FORMAT_R8G8_SNORM:
    case DXGI_FORMAT_R8G8_SINT:
        return DXGI_FORMAT_R8G8_TYPELESS;

    case DXGI_FORMAT_R16_FLOAT:
    case DXGI_FORMAT_D16_UNORM:
    case DXGI_FORMAT_R16_UNORM:
    case DXGI_FORMAT_R16_UINT:
    case DXGI_FORMAT_R16_SNORM:
    case DXGI_FORMAT_R16_SINT:
        return DXGI_FORMAT_R16_TYPELESS;

    case DXGI_FORMAT_R8_UNORM:
    case DXGI_FORMAT_R8_UINT:
    case DXGI_FORMAT_R8_SNORM:
    case DXGI_FORMAT_R8_SINT:
    case DXGI_FORMAT_A8_UNORM:
        return DXGI_FORMAT_R8_TYPELESS;

    case DXGI_FORMAT_B8G8R8A8_UNORM:
    case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
        return DXGI_FORMAT_B8G8R8A8_TYPELESS;

    case DXGI_FORMAT_B8G8R8X8_UNORM:
    case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
        return DXGI_FORMAT_B8G8R8X8_TYPELESS;
    }

    return format;
}

DXGI_FORMAT DxgiConverter::makeColor(DXGI_FORMAT format)
{
    switch (format)
    {
    case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
        return DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;

    case DXGI_FORMAT_D24_UNORM_S8_UINT:
        return DXGI_FORMAT_R24_UNORM_X8_TYPELESS;

    case DXGI_FORMAT_D32_FLOAT:
        return DXGI_FORMAT_R32_FLOAT;

    case DXGI_FORMAT_D16_UNORM:
        return DXGI_FORMAT_R16_UNORM;
    }

    return format;
}

DXGI_FORMAT DxgiConverter::makeDepth(DXGI_FORMAT format)
{
    switch (format)
    {
    case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
        return DXGI_FORMAT_D32_FLOAT_S8X24_UINT;

    case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
        return DXGI_FORMAT_D24_UNORM_S8_UINT;

    case DXGI_FORMAT_R32_FLOAT:
        return DXGI_FORMAT_D32_FLOAT;

    case DXGI_FORMAT_R16_UNORM:
        return DXGI_FORMAT_D16_UNORM;
    }

    return format;
}

DXGI_FORMAT DxgiConverter::convertDeclType(D3DDECLTYPE type)
{
    switch (type)
    {
    case D3DDECLTYPE_FLOAT1: return DXGI_FORMAT_R32_FLOAT;
    case D3DDECLTYPE_FLOAT2: return DXGI_FORMAT_R32G32_FLOAT;
    case D3DDECLTYPE_FLOAT3: return DXGI_FORMAT_R32G32B32_FLOAT;
    case D3DDECLTYPE_FLOAT4: return DXGI_FORMAT_R32G32B32A32_FLOAT;
    case D3DDECLTYPE_D3DCOLOR: return DXGI_FORMAT_B8G8R8A8_UNORM;
    case D3DDECLTYPE_UBYTE4: return DXGI_FORMAT_R8G8B8A8_UINT;
    case D3DDECLTYPE_SHORT2: return DXGI_FORMAT_R16G16_SINT;
    case D3DDECLTYPE_SHORT4: return DXGI_FORMAT_R16G16B16A16_SINT;
    case D3DDECLTYPE_UBYTE4N: return DXGI_FORMAT_R8G8B8A8_UNORM;
    case D3DDECLTYPE_SHORT2N: return DXGI_FORMAT_R16G16_SNORM;
    case D3DDECLTYPE_SHORT4N: return DXGI_FORMAT_R16G16B16A16_SNORM;
    case D3DDECLTYPE_USHORT2N: return DXGI_FORMAT_R16G16_UNORM;
    case D3DDECLTYPE_USHORT4N: return DXGI_FORMAT_R16G16B16A16_UNORM;
    case D3DDECLTYPE_UDEC3: return DXGI_FORMAT_R10G10B10A2_UINT;
    case D3DDECLTYPE_DEC3N: return DXGI_FORMAT_R10G10B10A2_UNORM;
    case D3DDECLTYPE_FLOAT16_2: return DXGI_FORMAT_R16G16_FLOAT;
    case D3DDECLTYPE_FLOAT16_4: return DXGI_FORMAT_R16G16B16A16_FLOAT;
    default:
    case D3DDECLTYPE_UNUSED: return DXGI_FORMAT_UNKNOWN;
    }
}

const char* DxgiConverter::convertDeclUsage(D3DDECLUSAGE usage)
{
    switch (usage)
    {
    case D3DDECLUSAGE_POSITION: return "POSITION";
    case D3DDECLUSAGE_BLENDWEIGHT: return "BLENDWEIGHT";
    case D3DDECLUSAGE_BLENDINDICES: return "BLENDINDICES";
    case D3DDECLUSAGE_NORMAL: return "NORMAL";
    case D3DDECLUSAGE_PSIZE: return "PSIZE";
    case D3DDECLUSAGE_TEXCOORD: return "TEXCOORD";
    case D3DDECLUSAGE_TANGENT: return "TANGENT";
    case D3DDECLUSAGE_BINORMAL: return "BINORMAL";
    case D3DDECLUSAGE_TESSFACTOR: return "TESSFACTOR";
    case D3DDECLUSAGE_POSITIONT: return "POSITIONT";
    case D3DDECLUSAGE_COLOR: return "COLOR";
    case D3DDECLUSAGE_FOG: return "FOG";
    case D3DDECLUSAGE_DEPTH: return "DEPTH";
    case D3DDECLUSAGE_SAMPLE: return "SAMPLE";
    default: return "UNKNOWN";
    }
}